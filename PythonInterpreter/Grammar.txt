// SUBTOKEN TERMINALS

DIGIT:		"0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
LETTER:		"a"->"z" | "A"->"Z"


// TOKEN TERMINALS

PLUS:		"+"
MINUS:		"-"
MUL:		"*"
DIV:		"/"
LPARENTH:	"("
RPARENTH:	")"
LBRACE:		"{"
RBRACE:		"}"
ASSIGN:		"="
SEMICOLON:	";"
TMP_OUT:	":"  // Temporary print statement
CAST:		"->"
IF:			"if"
NUMBER:		(DIGIT+) ['.' DIGIT*]

IDENTIFIER:	LETTER (LETTER | DIGIT)*


// NON-TERMINALS

Number:		((MINUS | PLUS) Number) | (NUMBER)

ArithmeticUnit:					(Number | IDENTIFIER | (LPARENTH ArithmeticExpression RPARENTH)) (CAST IDENTIFIER)*
ArithmeticComponentMulDiv:		ArithmeticUnit				((MUL | DIV)	ArithmeticUnit)*
ArithmeticComponentAddSub:		ArithmeticComponentMulDiv	((PLUS | MINUS)	ArithmeticComponentMulDiv)*
ArithmeticExpression:			ArithmeticComponentAddSub

AssignmentExpression:			IDENTIFIER ASSIGN ArithmeticExpression

PrintExpression:				OUT ArithmeticExpression
ConditionalExpression:			IF ArithmeticExpression Statement

Statement:						(AssignmentExpression | PrintExpression | ConditionalExpression) SEMICOLON
StatementBlock:					LBRACE Statement+ RBRACE

Program:						StatementBlock
